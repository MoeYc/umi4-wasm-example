'use strict';

const nunjucks = require('@ali/nunjucks');
const path = require('path');
const fs = require('fs');
const assert = require('assert');
const rimraf = require('rimraf');
const getGitProjectInfo = require('alicov/lib/git').getGitProjectInfo;
const HttpClient = require('urllib').HttpClient2;
const httpClient = new HttpClient();

const engine = nunjucks.configure({ autoescape: false, watch: false });

// 优先使用 npm_rootpath 环境变量
let root = process.env.npm_rootpath;
if (!root) {
  // 通过 npminstall 安装的,层级结构比较深
  if (__dirname.indexOf('.npminstall') >= 0) {
    root = path.join(__dirname, '../../../../../../..');
  } else {
    root = path.join(__dirname, '../../..');
  }
}

if (process.env.CI_ROOT_FOR_TEST) {
  root = process.env.CI_ROOT_FOR_TEST;
}

let pkg;
try {
  pkg = require(path.join(root, 'package.json'));
} catch (err) {
  console.error('read package.json error: %s', err.message);
  console.error('[@ali/ci] stop create ci yml');
  process.exit(0);
}

const defaultImage = (pkg.ci && pkg.ci.type === 'aone')
  ? 'cise/cise_6u2'
  : null;

const config = Object.assign({
  enable: true,
  autoBadges: true,
  type: '', // or gitlab, aone, aoneci
  versions: [],
  // only aoneci
  beforeShell: [],
  command: 'ci',
  tags: '',
  image: defaultImage,
  coverageReport: 'alicov-report',
  cpp: false,
  forceToAci2: true,
  coverage: true,
  fullParallel: true,
  fullSerial: false,
}, pkg.ci);

if (config.fullSerial === true) {
  config.fullParallel = false;
}

// 适配 "version": "6, 8, 10"
if ((!config.versions || config.versions.length === 0) && config.version) {
  config.versions = config.version;
}

// 适配 versions 是字符串格式
if (config.versions && typeof config.versions === 'string') {
  config.versions = config.versions.split(',').map(v => v.trim());
}

config.versions = config.versions || [];
if (config.versions.length === 0) {
  const installNode = pkg.engines && (pkg.engines['install-node'] || pkg.engines['install-alinode']);
  // aci 2.0 用于处理用户设置 pkg.engines 时的渲染标记
  config.installNode = installNode;
  if (!installNode) {
    // 默认使用 node v14 LTS
    config.versions = [{ name: 'node', version: '14' }];
  }
} else {
  config.versions = config.versions.map(v => {
    v = String(v);
    // support 4, 4.1.0, node=4, node=4.5.0, alinode=2, alinode=3.2.0
    if (v.indexOf('=') > 0) {
      const splits = v.split('=');
      return { name: splits[0], version: splits[1] };
    }

    return { name: 'node', version: v };
  });
}

const variables = [];
const paramVariables = config.variables || {};
Object.keys(paramVariables).forEach(key => {
  variables.push({ name: key, value: paramVariables[key] });
});
config.variables = variables;
config.services = config.services || [];
if (typeof config.services === 'string') {
  config.services = config.services.split(',');
}

// 默认 docker 模式，除非强制设置为 false
if (config.docker !== false) {
  config.docker = true;
}

if (!config.type) {
  const gitInfo = getGitProjectInfo();
  // 优先判断 git 地址，pkg.repository 可以为简写
  let repository = gitInfo.giturl || (pkg.repository && pkg.repository.url) || pkg.repository;
  if (process.env.NODE_ENV === 'test') {
    // ci 下忽略 giturl
    repository = (pkg.repository && pkg.repository.url) || pkg.repository;
  }
  // 兼容 pkg.repository.url 为空字符串
  if (typeof repository === 'string') {
    if (repository.indexOf('gitlab.alipay') !== -1
      || repository.indexOf('gitlab.antfin') !== -1
      || repository.indexOf('code.linke.alipay') !== -1
      || repository.indexOf('code.alipay') !== -1
    ) {
      config.type = 'aci';
    } else {
      config.type = 'aoneci';
    }
  } else {
    config.type = 'aoneci';
  }
}

if (pkg.config) {
  config.obproxy = !!pkg.config.obproxy;
  config.mosn = !!pkg.config.mosn;
}

function renderTemplate(config) {
  let ymlName = '';
  let ymlContent = '';
  if (config.type === 'aci' && config.forceToAci2) {
    config.type = 'aci2';
  }
  if (config.type === 'gitlab') {
    ymlContent = config.docker
      ? engine.renderString(getTpl('gitlab_docker'), config)
      : engine.renderString(getTpl('gitlab'), config);
    ymlName = '.gitlab-ci.yml';
  } else if (config.type === 'aone') {
    if (config.versions.length > 0) {
      config.pipeline = [
        config.versions.map(item => `prepare_${item.name}_${item.version}`).join(','),
        config.versions.map(item => `unit_test_${item.name}_${item.version}`).join(',')
      ];
    }

    ymlContent = engine.renderString(getTpl('aone'), config);
    ymlName = '.aoneci.yml';
    // 尝试删除 .gitlab-ci.yml
    rimraf.sync(path.join(root, '.gitlab-ci.yml'));
  } else if (config.type === 'aoneci') {
    config.versions.forEach((item, index) => {
      item.scripts = {
        ci: 'tnpm run ci',
      };
      item.coverageReport = config.coverageReport;
      item.nodeVersion = `${item.name}-${item.version}`;
      item.pipeline = `${item.name}-${item.version}-单元测试`;
      // default image: 'aone-base-global/alios7-nodejs-ci:1.0.0'
      if (index <= 1 || config.fullParallel === true) {
        const envImage = config.image || 'aone-base-global/alios7-nodejs-ci:1.0.0';
        item.env = 'image: \'' + envImage + '\'';
      } else {
        const reuseItem = config.versions[index % 2];
        item.env = `load: ${reuseItem.pipeline}`;
      }
      // "scripts": {
      //   "4": {
      //     "ci": "TNPM_REGISTRY=\"http://registry.npm.alibaba-inc.com?bucket=alinpm-us1\" DEBUG=tnpm npm run ci"
      //   }
      // }
      if (config.scripts && config.scripts[item.version]) {
        item.scripts = config.scripts[item.version];
      }
    });
    config.pipelines = [];
    if (config.fullParallel === true) {
      config.pipelines.push(config.versions.map(item => item.pipeline).join(','));
    } else if (config.fullSerial === true) {
      config.pipelines = config.pipelines.concat(config.versions.map(item => item.pipeline));
    } else {
      // 只允许并行 2 台服务器运行
      for (let i = 0; i < config.versions.length; i++) {
        const item = config.versions[i];
        const next = config.versions[i + 1];
        i++;
        if (next) {
          config.pipelines.push(`${item.pipeline},${next.pipeline}`);
        } else {
          config.pipelines.push(item.pipeline);
        }
      }
    }

    ymlContent = engine.renderString(getTpl('aoneci'), config);
    ymlName = '.aoneci.yml';
    // 尝试删除 .gitlab-ci.yml
    rimraf.sync(path.join(root, '.gitlab-ci.yml'));
  } else if (config.type === 'aci') {
    // 设置 aci 的全局 environments
    // environments 是 aci job 执行时的环境变量，详见 https://yuque.antfin-inc.com/linke/help/kg1p34#2ATkL

    // 把 gitlab-ci 中的 MYSQL_DATABASE 字段进行复用，方便 gitlab-ci 迁移 aci 的时候只需要加一个 type: aci 即可
    const defaultEnv_MYSQL_DATABASE = (() => {
      if (!Array.isArray(config.variables) || !config.variables.length) {
        return undefined;
      }
      const mysqlDatabase = config.variables.find((item) => item.name === "MYSQL_DATABASE");
      return mysqlDatabase ? mysqlDatabase.value : undefined;
    })();

    // 默认的 environments
    const defaultEnvironments = removeUndefinedProperty({
      NODE_ENV: "test",
      MYSQL_DATABASE: defaultEnv_MYSQL_DATABASE,
    });

    // 用户指定的 environments
    const userSpecifiedEnvironments = removeUndefinedProperty(
      pkg.ci && pkg.ci.environments && typeof pkg.ci.environments === "object"
        ? pkg.ci.environments
        : {}
    )
    config.environments = Object.assign(defaultEnvironments, userSpecifiedEnvironments);

    // aci 运行资源配置，默认 4c12g30g 配置
    const defaultResourceConfig = {
      cpu: 4,
      memory: 12,
      storage: 30,
    }
    if (!config.resource) {
      config.resource = defaultResourceConfig;
    } else {
      config.resource.cpu = config.resource.cpu || defaultResourceConfig.cpu;
      config.resource.memory = config.resource.memory || defaultResourceConfig.memory;
      config.resource.storage = config.resource.storage || defaultResourceConfig.storage;
    }
    if (config.coverage === false) {
      ymlContent = engine.renderString(getTpl('aci-no-coverage'), config);
    } else {
      ymlContent = engine.renderString(getTpl('aci'), config);
    }
    ymlName = '.aci.yml';
    // 尝试删除 .gitlab-ci.yml
    rimraf.sync(path.join(root, '.gitlab-ci.yml'));
  } else if (config.type === 'aci2') {
    // 设置 aci 的全局 environments
    // 把 gitlab-ci 中的 MYSQL_DATABASE 字段进行复用，方便 gitlab-ci 迁移 aci 的时候只需要加一个 type: aci 即可
    const defaultEnv_MYSQL_DATABASE = (() => {
      if (!Array.isArray(config.variables) || !config.variables.length) {
        return undefined;
      }
      const mysqlDatabase = config.variables.find((item) => item.name === "MYSQL_DATABASE");
      return mysqlDatabase ? mysqlDatabase.value : undefined;
    })();

    // 默认的 environments
    const defaultEnvironments = removeUndefinedProperty({
      NODE_ENV: "test",
      MYSQL_DATABASE: defaultEnv_MYSQL_DATABASE,
    });

    // 用户指定的 environments
    const userSpecifiedEnvironments = removeUndefinedProperty(
      pkg.ci && pkg.ci.environments && typeof pkg.ci.environments === "object"
        ? pkg.ci.environments
        : {}
    )
    config.environments = Object.assign(defaultEnvironments, userSpecifiedEnvironments);
    if (config.installNode) {
      config.versions = [{ name: 'engines', version: 'default' }];
    }
    config.stages = config.stages || { run: ['ci'] };
    for (const stage in config.stages) {
      assert(['before', 'build', 'lint', 'run', 'after'].includes(stage), `${stage} is not supported, should be 'before'|'build'|'lint'|'run'|'after'!`);
      assert(Array.isArray(config.stages[stage]), `stage: '${stage}' must be an array!`);
      for (const value of config.stages[stage]) {
        if (typeof (value) !== 'string') {
          assert(value.script, `stage: '${stage}' script option is required!`);
          assert(value.job, `stage: '${stage}' job option is required!`);
        }
      }
    }
    // aci 运行资源配置，resourceClass 是用于指定机器规格，可选是S(代表:2c4g20g)、M(代表:4c8g40g)、L(代表:8c16g80g)
    config.resourceClass = config.resourceClass || "M"
    ymlContent = engine.renderString(getTpl('aci2'), config);
    ymlName = '.aci.yml';
    // 尝试删除 .gitlab-ci.yml
    rimraf.sync(path.join(root, '.gitlab-ci.yml'));
  } else {
    if (config.versions.length > 0) {
      config.pipeline = config.versions.map(item => `${item.name}-${item.version}`).join(', ');
    }
    ymlContent = engine.renderString(getTpl('cise'), config);
    ymlName = '.cise.yml';
    // 尝试删除 .gitlab-ci.yml
    rimraf.sync(path.join(root, '.gitlab-ci.yml'));
  }

  const ymlPath = path.join(root, ymlName);
  fs.writeFileSync(ymlPath, ymlContent);
  console.log(`[@ali/ci] create ${ymlPath} success`);
}


// 版本号从 https://code.alipay.com/images/node-ci/tags 查询
const DEFAULT_IMAGE = 'reg.docker.alibaba-inc.com/dockerlab/node-ci:3.8.6';
const CONFIG_URL = 'https://render.alipay.com/p/h5data/ci-data_CI_CONFIG-h5data.json';
function getDefaultImage(cb) {
  // 默认镜像配置
  // https://basement.alipay.com/chair/ci-data/schemas/CI_CONFIG-h5data/console/online/5e43db9fbac04e6712a634c1
  httpClient.request(CONFIG_URL, { dataType: 'json', retry: 3 })
    .then(function (res) {
      const data = res.data;
      const image = data.registry + '/' + data.namespace + '/' + data.name + ':' + data.label;
      return cb(null, image);
    })
    .catch(function (err) {
      console.log('get default image failed: %s', err.message);
      return cb(null, DEFAULT_IMAGE);
    });
}

const ASSETS_URL = 'https://hitu.alipay.com/api/badge/ci';
const ASSETS_DEPS = ['@alipay/smallfish-plugin-hitu', '@alipay/minifish-plugin-lib', '@alipay/sherry-component', '@alipay/umi-preset-library'];

// 请求资产 Badge 信息
function prepareBadge(cb) {
  if (!pkg || !pkg.devDependencies) {
    return cb(null);
  }
  // 非 minifish smallfish bigfish 也不用请求
  const deps = Object.keys(pkg.devDependencies);
  const notAssets = deps.every(dep => !ASSETS_DEPS.includes(dep));
  if (notAssets) {
    return cb(null);
  }
  httpClient
    .request(`${ASSETS_URL}?package=${pkg.name}`, {
      dataType: "json",
      // 设置超时时间 1s
      timeout: 1000,
    })
    .then(function (res) {
      const data = res.data;
      return cb(data);
    })
    .catch(function (err) {
      console.log("get assets badge failed: %s", err.message);
      return cb(null);
    });
}

function getTpl(name) {
  return fs.readFileSync(path.join(__dirname, 'templates', name), 'utf8');
}

function addBadges(pkg, root, config, badgeData) {
  if (!config.autoBadges) return;

  // try to create badges
  // https://www.atatech.org/articles/67130
  const gitInfo = getGitProjectInfo();
  const gitURL = gitInfo.giturl || (pkg.repository && pkg.repository.url);
  let engines = '';
  if (pkg.engines && Object.keys(pkg.engines).length > 0) {
    for (const key in pkg.engines) {
      const value = pkg.engines[key];
      engines += `\n![${key} ${value}](https://duing.alibaba-inc.com/img/label?key=${encodeURIComponent(key)}&value=${encodeURIComponent(value)}&keyBgColor=505050&valueBgColor=51CA2A&size=12)`;
    }
  }

  let assetTitleList = [];
  let assetUrlList = [];
  if (badgeData && badgeData.success) {
    badgeData.data.forEach(function (item) {
      const type = item.type;
      const link = item.link;
      const image = item.image;
      assetTitleList.push(`[![HiTu ${type}][HiTu-${type}-image]][Hitu-${type}-url]`);
      assetUrlList.push(`[HiTu-${type}-image]: ${image}`);
      assetUrlList.push(`[HiTu-${type}-url]: ${link}`);
    });
  }
  // config.type === 'aoneci'
  let badgesMarkdown = pkg.name && pkg.version && !pkg.private ? `
## Badges
${assetTitleList.join('\n')}
[![Build status][build-status-image]][aone-ci-url]
[![Line coverage][line-coverage-image]][aone-ci-url]
[![Branch coverage][branch-coverage-image]][aone-ci-url]${engines}
[![TNPM version][tnpm-image]][tnpm-url]
[![TNPM downloads][tnpm-downloads-image]][tnpm-url]

${assetUrlList.join('\n')}
[tnpm-image]: https://npm.alibaba-inc.com/badge/v/${pkg.name}.svg
[tnpm-url]: https://npm.alibaba-inc.com/package/${pkg.name}
[tnpm-downloads-image]: https://npm.alibaba-inc.com/badge/d/${pkg.name}.svg
[aone-ci-url]: https://aone-api.alibaba-inc.com/ak/testservice/api/badge/link?repo=${gitURL}
[build-status-image]: https://aone-api.alibaba-inc.com/ak/testservice/api/badge/query?repo=${gitURL}&type=${encodeURIComponent('构建状态')}
[line-coverage-image]: https://aone-api.alibaba-inc.com/ak/testservice/api/badge/query?repo=${gitURL}&type=${encodeURIComponent('单测行覆盖率')}
[branch-coverage-image]: https://aone-api.alibaba-inc.com/ak/testservice/api/badge/query?repo=${gitURL}&type=${encodeURIComponent('单测分支覆盖率')}

--------------------
  ` : `
## Badges
${assetTitleList.join('\n')}
[![Build status][build-status-image]][aone-ci-url]
[![Line coverage][line-coverage-image]][aone-ci-url]
[![Branch coverage][branch-coverage-image]][aone-ci-url]${engines}

${assetUrlList.join('\n')}
[aone-ci-url]: https://aone-api.alibaba-inc.com/ak/testservice/api/badge/link?repo=${gitURL}
[build-status-image]: https://aone-api.alibaba-inc.com/ak/testservice/api/badge/query?repo=${gitURL}&type=${encodeURIComponent('构建状态')}
[line-coverage-image]: https://aone-api.alibaba-inc.com/ak/testservice/api/badge/query?repo=${gitURL}&type=${encodeURIComponent('单测行覆盖率')}
[branch-coverage-image]: https://aone-api.alibaba-inc.com/ak/testservice/api/badge/query?repo=${gitURL}&type=${encodeURIComponent('单测分支覆盖率')}

--------------------
  `;
  if (config.type !== 'aoneci') {
    // pkg.private 为 true 代表是应用代码，也不添加 badges
    if (!pkg.name || !pkg.version || pkg.private) return;

    badgesMarkdown = `
## Badges
${assetTitleList.join('\n')}
[![TNPM version][tnpm-image]][tnpm-url]
[![TNPM downloads][tnpm-downloads-image]][tnpm-url]${engines}

${assetUrlList.join('\n')}
[tnpm-image]: https://npm.alibaba-inc.com/badge/v/${pkg.name}.svg
[tnpm-url]: https://npm.alibaba-inc.com/package/${pkg.name}
[tnpm-downloads-image]: https://npm.alibaba-inc.com/badge/d/${pkg.name}.svg

--------------------
    `;
  }

  // 如果 README.md 能自动设置，就自动设置
  let readme = path.join(root, 'README.md');
  if (!fs.existsSync(readme)) readme = path.join(root, 'readme.md');
  if (fs.existsSync(readme)) {
    let text = fs.readFileSync(readme, 'utf8');
    const reg = /## Badges[\n\r][\s\S]+?--------------------/m;
    if (reg.test(text)) {
      text = text.replace(reg, badgesMarkdown.trim());
    } else {
      // 插入到前面
      const firstH2Index = text.indexOf('##');
      if (firstH2Index !== -1) {
        const before = text.substring(0, firstH2Index);
        const after = text.substring(firstH2Index);
        text = `${before.trimRight()}\n\n${badgesMarkdown.trim()}\n\n${after}`;
      } else {
        text = text.trimRight() + `\n\n${badgesMarkdown.trim()}\n`;
      }
    }
    fs.writeFileSync(readme, text);
    console.log('已经自动更新 Badges 到 README.md');
  }
}

/**
 * 去除 obj 里面的 undefined 的属性
 * @param {Object} obj
 * @returns {Object} 返回一个新的对象实例
 */
function removeUndefinedProperty(obj) {
  const shallowCopied = Object.assign({}, obj);
  Object.keys(shallowCopied).forEach((key) => shallowCopied[key] === undefined && delete shallowCopied[key]);
  return shallowCopied;
}

if (config.enable) {
  // aoneci 不支持 reg.docker.alibaba-inc.com/dockerlab/node-ci 镜像
  if (config.image || config.type === 'aoneci') {
    renderTemplate(config);
  } else {
    getDefaultImage(function (err, image) {
      if (err) {
        console.error('get default image error: %s', err.message);
        return process.exit(1);
      }
      config.image = image;
      if (config.image) {
        renderTemplate(config);
      }
    });
  }
  prepareBadge(function (data) {
    addBadges(pkg, root, config, data);
  });
}
