'use strict';

const utils = require('./utils/');

function Resource(options) {
  this.name = null;
  this._styles = [];
  this._scripts = [];
  this.options = options;
}

function pushStack(list, item) {
  if (list.indexOf(item) === -1) {
    list.push(item);
  }
}

const proto = Resource.prototype;

proto.getScriptKey = function() {
  return this._scripts.join(',');
};

proto.getStyleKey = function() {
  return this._styles.join(',');
};

proto.use = function(file) {
  if (utils.isScriptFile(file)) {
    pushStack(this._scripts, file);
  } else if (utils.isStyleFile(file)) {
    pushStack(this._styles, file);
  }
};

proto.addHost = function(hostname) {
  ['_styles', '_scripts'].forEach(key => {
    this[key] = this[key].map(filePath => `${hostname}/${filePath}`);
  });
};

proto.getScript = function() {
  if (this._scripts.length === 0) {
    return '';
  }

  let files = this.options.resolve(this._scripts, 'javascript', this.fileName);
  if (this.options.map.hasOwnProperty(files)) {
    files = this.options.map[files];
  }
  return '<script crossorigin="anonymous" type="text/javascript" src="' + files + '"></script>';
};

proto.getStyle = function() {
  if (this._styles.length === 0) {
    return '';
  }

  let files = this.options.resolve(this._styles, 'stylesheet', this.fileName);
  if (this.options.map.hasOwnProperty(files)) {
    files = this.options.map[files];
  }
  return '<link charset="utf-8" rel="stylesheet" type="text/css" href="' + files + '" />';
};

proto.bindRenderFile = function(fileName) {
  if (fileName) {
    this.fileName = fileName;
  }
};


proto.reset = function() {
  this.name = null;
  this._scripts = [];
  this._styles = [];
  this.fileName = '';
};

module.exports = Resource;
