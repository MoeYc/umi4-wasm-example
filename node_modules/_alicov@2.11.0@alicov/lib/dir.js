'use strict';

var fs = require('fs');
var path = require('path');
var istanbul = require('istanbul');
var uploadDir = require('./upload_dir');
var getGitProjectInfo = require('./git').getGitProjectInfo;
var chalk = require('chalk');

module.exports = function dir(threshold, ossClient, root, pkg, testReportUrl) {
  var gitInfo = getGitProjectInfo();
  var collector = new istanbul.Collector();
  var coveragePath = path.join(root, 'coverage-final.json');
  if (!fs.existsSync(coveragePath)) {
    coveragePath = path.join(root, 'coverage.json');
  }
  // 此处检查是否存在此文件
  if (fs.existsSync(coveragePath)) {
    collector.add(JSON.parse(fs.readFileSync(coveragePath, 'utf8')));
  } else {
    // 退出
    console.log(chalk.yellow(coveragePath + ' not exist! '));
    process.exit(1);
  }

  var actuals = istanbul.utils.summarizeCoverage(collector.getFinalCoverage());
  if (gitInfo.hash) {
    actuals.hash = gitInfo.hash;
    actuals.comment = gitInfo.comment;
    actuals.email = gitInfo.email;
    actuals.author = gitInfo.author;
    actuals.giturl = gitInfo.giturl;
    actuals.branch = gitInfo.branch;
  }

  actuals.testReportUrl = testReportUrl || '';
  // cise
  actuals.buildUrl = gitInfo.buildUrl;
  if (!actuals.buildUrl) {
    // gitlab ci
    if (process.env.CI_PROJECT_ID && process.env.CI_BUILD_ID) {
      // CI_BUILD_ID=18283
      // CI_PROJECT_ID=95
      actuals.buildUrl = 'http://gitlab-ci.alipay-inc.com/projects/' +
        process.env.CI_PROJECT_ID + '/builds/' + process.env.CI_BUILD_ID;
    }
  }

  // fix { total: 0, covered: 0, skipped: 0, pct: 100 },
  // https://github.com/gotwarlost/istanbul/blob/v0.4.5/lib/object-utils.js#L99
  ['lines', 'statements', 'functions', 'branches'].forEach(function(item) {
    if (actuals[item] && actuals[item].total === 0) {
      actuals[item].pct = 0;
    }
  });

  // console.log(actuals)
  // { lines: { total: 17, covered: 17, skipped: 0, pct: 100 },
  // statements: { total: 17, covered: 17, skipped: 0, pct: 100 },
  // functions: { total: 4, covered: 4, skipped: 0, pct: 100 },
  // branches: { total: 14, covered: 14, skipped: 0, pct: 100 } }

  // 行覆盖率信息: CODE COVERAGE RESULT OF LINES IS: xx/xx
  // 分支覆盖率信息: CODE COVERAGE RESULT OF BRANCHES IS: xx/xx
  // 覆盖率报表链接: CODE COVERAGE RESULT WAS SAVED TO: http://10.32.20.131/t.html

  // output:
  // CODE COVERAGE RESULT WAS SAVED TO: http://xxx/xxx.html
  // CODE COVERAGE RESULT OF LINES IS: 157/164

  var cov = actuals.lines.pct;
  var pass = false;

  // First line must be empty, otherwise mocha analyze will fails on CISE(TOAST) ci env
  console.log('\nCODE_COVERAGE_LINES: %s/%s', actuals.lines.covered, actuals.lines.total);
  console.log('CODE_COVERAGE_NAME_LINES: 行');
  console.log('CODE_COVERAGE_EN_NAME_LINES: Line');
  console.log('CODE_COVERAGE_BRANCHES: %s/%s', actuals.branches.covered, actuals.branches.total);
  console.log('CODE_COVERAGE_NAME_BRANCHES: 分支');
  console.log('CODE_COVERAGE_EN_NAME_BRANCHES: Branch');
  console.log('CODE_COVERAGE_FUNCTIONS: %s/%s', actuals.functions.covered, actuals.functions.total);
  console.log('CODE_COVERAGE_NAME_FUNCTIONS: 函数');
  console.log('CODE_COVERAGE_EN_NAME_BRANCHES: Funcition');
  console.log('CODE_COVERAGE_STATEMENTS: %s/%s', actuals.statements.covered, actuals.statements.total);
  console.log('CODE_COVERAGE_NAME_STATEMENTS: 段落');
  console.log('CODE_COVERAGE_EN_NAME_BRANCHES: Statement');

  // 行覆盖率
  console.log('CODE COVERAGE RESULT: %s%', cov);
  // 分支覆盖率
  console.log('CODE COVERAGE BRANCHES RESULT: %s%', actuals.branches.pct);

  if (typeof threshold === 'object') {
    threshold.line = threshold.line || 0;
    threshold.statement = threshold.statement || 0;
    threshold.function = threshold.function || 0;
    threshold.branch = threshold.branch || 0;
    if (cov < threshold.line) {
      console.log("CODE COVERAGE_LINES BELOW THRESHOLD: %s% < %s%", cov, threshold.line);
    } else if (actuals.statements.pct < threshold.statement) {
      console.log("CODE COVERAGE STATEMENTS BELOW THRESHOLD: %s% < %s%", actuals.statements.pct, threshold.statement);
    } else if (actuals.functions.pct < threshold.function) {
      console.log("CODE COVERAGE FUNCTIONS BELOW THRESHOLD: %s% < %s%", actuals.functions.pct, threshold.function);
    } else if (actuals.branches.pct < threshold.branch) {
      console.log("CODE COVERAGE BRANCHES BELOW THRESHOLD: %s% < %s%", actuals.branches.pct, threshold.branch);
    } else {
      pass = true;
    }
  } else {
    if (cov < threshold) {
      console.log("CODE COVERAGE_LINES BELOW THRESHOLD: %s% < %s%", cov, threshold);
    } else {
      pass = true;
    }
  }

  if (pass) {
    console.log('CODE COVERAGE SUCCEEDED');
  }

  var lcovDir = path.join(root, 'lcov-report');

  uploadDir(ossClient, 'alicov', lcovDir, pkg, /lcov-report(\/|\\)+index\.html/, function(_, indexURL) {
    console.log('CODE_COVERAGE_REPORT_LINES: %s', indexURL);
    console.log('CODE_COVERAGE_REPORT_BRANCHES: %s', indexURL);
    console.log('CODE_COVERAGE_REPORT_FUNCTIONS: %s', indexURL);
    console.log('CODE_COVERAGE_REPORT_STATEMENTS: %s', indexURL);
    actuals.coverageReportUrl = indexURL;
    fs.writeFileSync(path.join(root, 'summary.json'), JSON.stringify(actuals, null, 2));
    process.exit(pass ? 0 : 1);
  });
};
