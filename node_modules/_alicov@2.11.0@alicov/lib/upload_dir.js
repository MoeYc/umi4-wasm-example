/**
 * 上传整个文件夹到 tfs, oss
 */

'use strict';

var fs = require('fs');
var path = require('path');
var co = require('co');
var uuid = require('uuid/v4');
var exec = require('./exec');

module.exports = uploadDir;

var maxSize = 200 * 1024 * 1024; // 200MB
function uploadDir(ossClient, root, dir, pkg, indexUrlRegex, callback) {
  var files = [];
  var walk = function (p) {
    var names = fs.readdirSync(p);
    names.forEach(function (n) {
      var filepath = path.join(p, n);
      var stat = fs.statSync(filepath);
      if (stat.isDirectory()) {
        walk(filepath);
      } else if (stat.size <= maxSize) {
        files.push(filepath);
      } else {
        console.log('%s size %d > %d, ignore it', filepath, stat.size, maxSize);
      }
    });
  };

  walk(dir);

  var count = 0;
  var indexURL;
  var hash = process.env.CI_BUILD_REF || exec('git log -n 1 --pretty=format:"%H"');
  if (!hash) {
    hash = pkg.version || '0.0.0';
  }

  if (files.length === 0) {
    return callback();
  }

  // 增加 uuid，避免被遍历
  hash = hash + '-' + uuid();

  co(function*() {
    for (var i = 0; i < files.length; i++) {
      var filename = files[i];
      var prefix = process.env.ALICOV_PREFIX ? process.env.ALICOV_PREFIX + '/' : '';
      var name = root + (process.env.CI ? '/ci' : '/local') + '/node-' + process.version + '/' + pkg.name + '/' + prefix + hash + filename.replace(dir, '');
      if (/\/css\/mochawesome\.css$/.test(filename)) {
        var css = fs.readFileSync(filename, 'utf8');
        css = css.replace(/\.\.\/fonts\/\/Roboto\+/g, '../fonts/Roboto%2B')
        css = css.replace(/\.\.\/fonts\/\/mochawesome\./g, '../fonts/mochawesome.')
        fs.writeFileSync(filename, css);
      }
      try {
        var info = yield ossClient.put(name, filename);
        if (indexUrlRegex.test(filename)) {
          indexURL = info.url;
        }
      } catch (err) {
        console.warn('[alicov] upload %s to oss:%s error: %s', filename, name, err);
      }
    }
  }).catch(function(err) {
    console.error(err.stack);
    callback(err);
  }).then(function() {
    callback(null, indexURL);
  });
}
